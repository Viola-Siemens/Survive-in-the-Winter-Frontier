buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
        maven { name="sponge"; url 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '[6.0.24,6.2)', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = '1.2.10'
group = 'com.hexagram2021.misc_twf'
archivesBaseName = 'misc_twf'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

compileJava {
    sourceCompatibility = 17
    targetCompatibility = 17
}
java.disableAutoTargetJvm()

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')
            //Important: Remove if you a not using JetBrains Runtime (JBR)
            //jvmArg("-XX:+AllowEnhancedClassRedefinition")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'misc_twf'
            arg "-mixin.config=misc_twf.mixins.json"

            mods {
                misc_twf {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'misc_twf'
            arg "-mixin.config=misc_twf.mixins.json"

            mods {
                misc_twf {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/test_server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'misc_twf'
            arg "-mixin.config=misc_twf.mixins.json"

            mods {
                misc_twf {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'misc_twf', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            arg "-mixin.config=misc_twf.mixins.json"

            mods {
                misc_twf {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven {
        name = 'Blamejared Maven'
        url = 'https://maven.blamejared.com/'
    }
    maven {
        name = 'theillusivec4\'s Maven'
        url = 'https://maven.theillusivec4.top/'
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = 'GeckoLib'
        url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        name = "Florensie's Maven"
        url = "https://maven.florens.be/releases"
    }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation('cpw.mods:securejarhandler') { version { strictly '0.9.45' } }

    minecraft 'net.minecraftforge:forge:1.18.2-40.3.0'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly annotationProcessor('io.github.llamalad7:mixinextras-common:0.4.1')
    implementation "io.github.llamalad7:mixinextras-forge:0.4.1"

    implementation fg.deobf("mezz.jei:jei-1.18.2-forge:10.2.1.1005")
    implementation fg.deobf("be.florens:expandability-forge:6.0.0")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.18.2-1.1.3")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.57')
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.1")
    implementation fg.deobf("net.darkhax.gamestages:GameStages-Forge-1.18.2:8.1.3")
    runtimeOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-1.18.2:13.3.56")

    implementation fg.deobf('curse.maven:atlaslib-463826:4567244')              //////
    runtimeOnly fg.deobf("curse.maven:biomancy-492939:4496477")
    implementation fg.deobf("curse.maven:create-328085:4550986")                //////
    implementation fg.deobf("curse.maven:createaddition-439890:4683727")        //////
    runtimeOnly fg.deobf("curse.maven:createdeco-509285:4554163")
    implementation fg.deobf("curse.maven:diet-443570:4571116")                  //////
    compileOnly fg.deobf("curse.maven:embeddium-908741:4949961")
    compileOnly fg.deobf("curse.maven:embeddiumplus-931925:4958315")
    runtimeOnly fg.deobf("curse.maven:flywheel-486392:4341461")
    implementation fg.deobf('curse.maven:framework-549225:4613856')             //////
    implementation fg.deobf("curse.maven:hunger_reworked-847923:6358923")       //////
    implementation fg.deobf("curse.maven:hordes-485779:5287529")                //////
    implementation fg.deobf("curse.maven:jade-324717:4575623")                  //////
    compileOnly fg.deobf("curse.maven:kubejs-238086:4377177")
    runtimeOnly fg.deobf("curse.maven:spark-361579:4505375")
    implementation fg.deobf("curse.maven:tacz-1028108:6069322-sources-6069332") //////
    implementation fg.deobf("curse.maven:tetrachordlib-980149:5153986")         //////
    implementation fg.deobf("curse.maven:travelersbackpack-321117:5310212")     //////
    implementation fg.deobf("curse.maven:justlevelingfork-1073400:5677674")     //////
    runtimeOnly fg.deobf("curse.maven:verdure-577197:4365968")
    runtimeOnly fg.deobf("curse.maven:zombie_extreme-392809:4746394")
    implementation fg.deobf("curse.maven:sona-survival-101-1023345:5828134")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Survive in the Winter Frontier",
                "Specification-Vendor"    : "Hexagram",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Hexagram",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePluginContainsFMLMod': 'true'
        ])
    }
    from('LICENSE')
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, 'misc_twf.refmap.json'
    config 'misc_twf.mixins.json'

    debug.verbose = true
    debug.export = true
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}